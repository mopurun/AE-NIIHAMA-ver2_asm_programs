PROCESSOR 16F886
#include <xc.inc>
; 1500GYO
;    TITLE   "PIC_MC_prog1_v010"
;    LIST   P=PIC16F886
;    #INCLUDE "p16f886.inc"
;    __CONFIG _CONFIG1, _FOSC_HS & _WDTE_OFF & _PWRTE_OFF & _MCLRE_ON & _CP_OFF & _CPD_OFF & _BOREN_OFF & _IESO_OFF & _FCMEN_OFF & _LVP_OFF & _DEBUG_OFF 
;    __CONFIG _CONFIG2, _WRT_OFF & _BOR4V_BOR21V
config FOSC = HS ,WDTE = OFF ,PWRTE = OFF , MCLRE = ON , CP = OFF , CPD = OFF , BOREN = OFF , IESO = OFF , FCMEN = OFF , LVP = OFF , DEBUG = OFF
config WRT = OFF , BOR4V = BOR21V    
    ;Tcy=4/Fosc(typ) Fosc=20MHz 1cyc=0.2us
SEGS_START	    EQU	    020h    ;
Y5_START	    EQU	    021h    ;RGB LED 
PORTA_HOLD	    EQU	    022h    ;PORTA VALUE BACKUP
DELAY_TIME1	    EQU	    023h    ;TIMER 
DELAY_TIME2	    EQU	    024h    ;
DELAY_TIME3	    EQU	    025h 
DELAY_TIME_NUM1	    EQU	    026h
DELAY_TIME_NUM2	    EQU	    027h	
DELAY_TIME_NUM3	    EQU	    028h   
STATUS_BU	    EQU	    029h    ;STATUS REGISTER VALUE BACKUP
WREG_BU		    EQU	    02Ah    ;W REGISTER VALUE BACKUP	    
SEGS_NUM_CONV_TMP   EQU	    02Bh    ;input number for 7SEG-LED	    
BIN_PUSH_COUNT	    EQU	    02Ch
PUSH_SW_READ	    EQU	    02Dh
L_CONV_FOUR_L	    EQU	    02Eh
L_CONV_FOUR_H	    EQU	    02Fh	    
L_CONV_1F	    EQU	    030h	
L_CONV_2F	    EQU	    031h
L_CONV_3F	    EQU	    032h	    
L_CONV_4F	    EQU	    033h
SEGS_OUT_DATA	    EQU	    034h    ;output data to 7SEG-LED	
PROG_MODE_NUM	    EQU	    035h    ;PROGRAM MODE NUMBER MEMORY
PROG_MODE_NUM_TMP   EQU	    036h    ;BACKUP
SW1_READ_FLG	    EQU	    037h    ;If SW1 pressed then write 1   
SW2_READ_FLG	    EQU	    038h    ;If SW2 pressed then write 1      
SW3_READ_FLG	    EQU	    039h    ;If SW3 pressed then write 1      
SW4_READ_FLG	    EQU	    03Ah    ;If SW4 pressed then write 1
OPENING_TIME_1	    EQU	    03Bh    ;	    
OPENING_TIME_2	    EQU	    03Ch    ;	    
T2_ICNT_NUM_L	    EQU	    03Dh    ;COUNT SEC FOR INTERRUPT    
BIN_PUSH_COUNT_C    EQU	    03Eh    ;carry count	
BIT_CNT_START_FLG   EQU	    03Fh    ;   
T2_ICNT_NUM_H	    EQU	    040h   
TMR2_CONST_L	    EQU	    041h
TMR2_CONST_H	    EQU	    042h	    
ONESEC_FLG	    EQU	    043h
MIN_ONE		    EQU	    044h
MIN_TEN		    EQU	    045h
HOUR_ONE	    EQU	    046h
HOUR_TEN	    EQU	    047h
MINONE_CONST	    EQU	    048h
MINTEN_CONST	    EQU	    049h
HOURONE_CONST	    EQU	    04Ah
HOURTEN_CONST	    EQU	    04Bh
DC0_SEC_CNT	    EQU	    04Ch	    
D1D2_XOR_FLG	    EQU	    04Dh
STATUS_BU_CLKCNT    EQU	    04Eh	 
TMR2_CONST_ADJ	    EQU	    04Fh
SEC_CONST	    EQU	    050h	    
BITPLACE0	    EQU	    051h
NUM_TO_DIVIDE	    EQU	    052h    ;DIVISION-Number to divide
NUM_TOBE_DIVIDED    EQU	    053h    ;DIVISION-Number to be divided
DIVISION_RESULT	    EQU	    054h     
DIVISION_TMP0	    EQU	    055h    
BARL_LEV_NUM	    EQU	    056H
BARL_OUT_DATA	    EQU	    057h
READ_SW_EN	    EQU	    058h	
TOUCH_SW_FLG	    EQU	    059h
PORTB_BU	    EQU	    05AH	    
TMR1H_HOLD	    EQU	    05BH	    	    
TMR1L_HOLD	    EQU	    05CH
SETTING_REGISTER1   EQU	    05DH	;60?24?12??????	
SET_CLOCK_HOUR	    EQU	    05DH
HOUR_ONE_DISP	    EQU	    05Eh
HOUR_TEN_DISP	    EQU	    05Fh	    
	    
;ALL BANK ACCESS   
TRIS_BU		    EQU	    0x70	;BANK2    

;BIT CONFIG AT SET_CLOCK_HOUR
#define      SET_BIT_30H		    	    0	;1???30??
#define      SET_BIT_24H		    	    1	;1???24???0???12??    
#define      SET_BIT_HOLD_AMPM	    	    2	;1???PM?0???AM		    
		    
    #define      SEGS_ON_CNT	    7	    ;	
    #define      Y5_OFF_CNT	    127	    ;
    #define      DELAY_TIME_CNT1    15	    ;
    #define      DELAY_TIME_CNT2    15	    ;
    #define	 SEGS0		    11000000B	    ;7SEGLED_0
    #define	 SEGS1		    11111001B	    ;7SEGLED_1  
    #define	 SEGS2		    10100100B	    ;7SEGLED_2    
    #define	 SEGS3		    10110000B	    ;7SEGLED_3    
    #define	 SEGS4		    10011001B	    ;7SEGLED_4    
    #define	 SEGS5		    10010010B	    ;7SEGLED_5 or S   
    #define	 SEGS6		    10000010B	    ;7SEGLED_6
    #define	 SEGS7		    11011000B	    ;7SEGLED_7
    #define	 SEGS8		    10000000B	    ;7SEGLED_8    
    #define	 SEGS9		    10010000B	    ;7SEGLED_9
    #define	 SEGSA		    10001000B	    ;7SEGLED_A    
    #define	 SEGSB		    10000011B	    ;7SEGLED_b 
    #define	 SEGSC		    11000110B	    ;7SEGLED_C     
    #define	 SEGSD		    10100001B	    ;7SEGLED_d     
    #define	 SEGSE		    10000110B	    ;7SEGLED_E     
    #define	 SEGSF		    10001110B	    ;7SEGLED_F	
    #define	 SEGSERR	    11111111B	    ;7SEGLED_OVER_RANGE
    #define	 SEGSL		    11000111B	    ;7SEGLED_L
    #define      CHATTER_TIME_CNT1  255	    ;
    #define      CHATTER_TIME_CNT2  1	    ;no use
    #define      OPENING_TIME_CNT1  200	    ;    
    #define      OPENING_TIME_CNT2  100	    ;  
    #define      BIN_CNT_MOV_SPD    255	    ;  
;    #define	 TMR2_INT_TMR_CH    D'238'	    ; 4998 
;    #define	 TMR2_INT_TMR_CL    D'21'	    ; 4998
;    #define	 TMR2_INT_TMR_ADJ   D'2'	    ; 4998    
    #define	 TMR2_INT_TMR_CH    238	    ; 4999 
    #define	 TMR2_INT_TMR_CL    21	    ; 4999
    #define	 TMR2_INT_TMR_ADJ   1	    ; 4999
;    #define	 TMR2_INT_TMR_CH    D'250'	    ; 5000
;    #define	 TMR2_INT_TMR_CL    D'20'	    ; 5000
;    #define	 TMR2_INT_TMR_ADJ   D'2'	    ; 5000    
    
    
PSECT resetVec,class=CODE,delta=2
resetVec:    
;RES_VECT	    CODE    0x0000            ; processor reset vector
    ORG		0X0000
    GOTO	START                   ; go to beginning of program

; TODO ADD INTERRUPTS HERE IF USED
;INT_TMR0	    CODE    0x0004
    ORG		0X0004	    
    ;ROM_address Program_memory_map
    GOTO	INT_SUB

;INDIRECT_TABLE	    CODE    0x1800 
    ORG		0X0100
    GOTO	BARLED_LEVEL_CONSTDATA
    
;MAIN_PROG	    CODE                      ; let linker place main program

;-------------------------------------  
BARLED_LEVEL_DISP:
;    MOVF	BARL_LEV_NUM,W
    CALL	BARLED_LEVEL_CONSTDATA
    MOVWF	BARL_OUT_DATA
    RETURN
BARLED_LEVEL_CONSTDATA:	;NO USE
    MOVLW	1		;????0x0100
    MOVWF	PCLATH   
    MOVF	BARL_LEV_NUM,W    
    ANDLW	00001111B ;OxOF FILTER
    ADDWF	PCL,F
    RETLW	11111111B
    RETLW	11111110B
    RETLW	11111100B
    RETLW	11111000B  
    RETLW	11110000B   
    RETLW	11100000B
    RETLW	11000000B    
    RETLW	10000000B    
    RETLW	00000000B        
    RETURN    
;-------------------------------------  	    
	       
START:
	    
    CLRF	INTCON	    
    CALL	BANKSET_3
    MOVLW	03h		;b''
    MOVWF	ANSEL   
    CLRF	ANSELH 
    CALL	BANKSET_2    
    CALL	BANKSET_1
    MOVLW	07h		;b'00000111'
    MOVWF	TRISA		;IOsetting
    MOVLW	2Fh		;b'11101111'
    MOVWF	TRISB
    CLRF	TRISC		;all output
    MOVLW	11111001B	;249
    MOVWF	PR2		;BANK1 TMR2
    MOVLW	10000000B	;0X80
    MOVWF	OPTION_REG	;BANK1 TMR0  

    
    CALL	BANKSET_0    
    
    CLRF	PORTA		;all low
    CLRF	PORTB 
    CLRF	PORTC 
    BCF		TOUTPS0
    BCF		TOUTPS1
    BCF		TOUTPS2
    BCF		TOUTPS3    
    BSF		T2CKPS0
    BCF		T2CKPS1
    BSF		TMR2ON
    ;
    MOVLW	00000101B
    MOVWF	T2CON
    CLRF	T1CON
    
    NOP
    MOVLW	Y5_OFF_CNT 
    MOVWF	Y5_START
    MOVLW	SEGS_ON_CNT 
    MOVWF	SEGS_START    
    CLRF	BIN_PUSH_COUNT
    NOP
    MOVLW	OPENING_TIME_CNT1    
    MOVWF	OPENING_TIME_1    
    MOVLW	OPENING_TIME_CNT2   
    MOVWF	OPENING_TIME_2     
    
ALL_LED_ON: ;All LEDs ON 
    ;bit set/clear 200ns -all 2us(10cyc) 
    ;ABC-Y(X)

    
    DECFSZ	SEGS_START,1 
    GOTO	$+2    
    GOTO	$+6
    CLRF	PORTA		;000-Y0     
    BSF		RA3	;100-Y1 
    BSF		RA4	;110-Y3	
    BCF		RA3	;010-Y2    
    GOTO	$-7
    MOVLW	SEGS_ON_CNT 
    MOVWF	SEGS_START 
    BSF		RA5	;011-Y6  
    NOP
    NOP
    NOP
    BCF		RA4	;001-Y4    
    DECFSZ	Y5_START,1
    GOTO	$+4
    BSF		RA3	;101-Y5
    MOVLW	Y5_OFF_CNT 
    MOVWF	Y5_START
    MOVF	PORTA,W
    MOVWF	PORTA_HOLD
    MOVF	PORTA_HOLD,W
    IORLW	00111000B
    MOVWF	PORTA_HOLD
    MOVF	PORTA_HOLD,W
    MOVWF	PORTA		;111-Y7
    MOVLW	DELAY_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1
    MOVLW	DELAY_TIME_CNT2
    MOVWF	DELAY_TIME_NUM2    
    CALL	DELAY_LOOP_SET2  
   
    DECFSZ	OPENING_TIME_2,F
    GOTO	ALL_LED_ON
    MOVLW	OPENING_TIME_CNT2   
    MOVWF	OPENING_TIME_2    
    DECFSZ	OPENING_TIME_1,F
    GOTO	ALL_LED_ON
    GOTO	PG_SEL_PRE
 
    
;-------------------------------------           
SEGS_NUM_CONV:	;Convert numeric value into 7-segment LED display data
    INCF	SEGS_NUM_CONV_TMP,F	;n=n+1
    DECFSZ	SEGS_NUM_CONV_TMP,F	;if n-1=0
    GOTO	$+4
    MOVLW	SEGS0
    MOVWF	SEGS_OUT_DATA
    RETURN    
    DECFSZ	SEGS_NUM_CONV_TMP,F	;
    GOTO	$+4
    MOVLW	SEGS1
    MOVWF	SEGS_OUT_DATA 
    RETURN
    DECFSZ	SEGS_NUM_CONV_TMP,F	;
    GOTO	$+4
    MOVLW	SEGS2
    MOVWF	SEGS_OUT_DATA
    RETURN   
    DECFSZ	SEGS_NUM_CONV_TMP,F
    GOTO	$+4
    MOVLW	SEGS3
    MOVWF	SEGS_OUT_DATA 
    RETURN
    DECFSZ	SEGS_NUM_CONV_TMP,F
    GOTO	$+4
    MOVLW	SEGS4
    MOVWF	SEGS_OUT_DATA   
    RETURN    
    DECFSZ	SEGS_NUM_CONV_TMP,F
    GOTO	$+4
    MOVLW	SEGS5
    MOVWF	SEGS_OUT_DATA   
    RETURN    
    DECFSZ	SEGS_NUM_CONV_TMP,F
    GOTO	$+4
    MOVLW	SEGS6
    MOVWF	SEGS_OUT_DATA  
    RETURN
    DECFSZ	SEGS_NUM_CONV_TMP,F
    GOTO	$+4
    MOVLW	SEGS7
    MOVWF	SEGS_OUT_DATA 
    RETURN    
    DECFSZ	SEGS_NUM_CONV_TMP,F
    GOTO	$+4
    MOVLW	SEGS8
    MOVWF	SEGS_OUT_DATA    
    RETURN    
    DECFSZ	SEGS_NUM_CONV_TMP,F
    GOTO	$+4
    MOVLW	SEGS9
    MOVWF	SEGS_OUT_DATA  
    RETURN
    DECFSZ	SEGS_NUM_CONV_TMP,F
    GOTO	$+4
    MOVLW	SEGSA
    MOVWF	SEGS_OUT_DATA    
    RETURN    
    DECFSZ	SEGS_NUM_CONV_TMP,F
    GOTO	$+4
    MOVLW	SEGSB
    MOVWF	SEGS_OUT_DATA   
    RETURN    
    DECFSZ	SEGS_NUM_CONV_TMP,F
    GOTO	$+4
    MOVLW	SEGSC
    MOVWF	SEGS_OUT_DATA
    RETURN    
    DECFSZ	SEGS_NUM_CONV_TMP,F
    GOTO	$+4
    MOVLW	SEGSD
    MOVWF	SEGS_OUT_DATA   
    RETURN
    DECFSZ	SEGS_NUM_CONV_TMP,F
    GOTO	$+4
    MOVLW	SEGSE
    MOVWF	SEGS_OUT_DATA   
    RETURN    
    DECFSZ	SEGS_NUM_CONV_TMP,F
    GOTO	$+4
    MOVLW	SEGSF
    MOVWF	SEGS_OUT_DATA
    RETURN   
    MOVLW	SEGSERR					;OUT of RANGE
    MOVWF	SEGS_OUT_DATA
    RETURN
;-------------------------------------   
L_CONV_HEX:	    ;Convert 16 bit binary number into hexadecimal 4-digit number
    MOVF	L_CONV_FOUR_L,W
    ANDLW	00001111B
    MOVWF	L_CONV_1F
    MOVF	L_CONV_FOUR_L,W
    RRF		L_CONV_FOUR_L,F
    RRF		L_CONV_FOUR_L,F
    RRF		L_CONV_FOUR_L,F
    RRF		L_CONV_FOUR_L,F  
    MOVF	L_CONV_FOUR_L,W
    ANDLW	00001111B
    MOVWF	L_CONV_2F    
;first 1 2 next 3 4 
    MOVF	L_CONV_FOUR_H,W
    ANDLW	00001111B
    MOVWF	L_CONV_3F
    MOVF	L_CONV_FOUR_H,W
    RRF		L_CONV_FOUR_H,F
    RRF		L_CONV_FOUR_H,F
    RRF		L_CONV_FOUR_H,F
    RRF		L_CONV_FOUR_H,F  
    MOVF	L_CONV_FOUR_H,W
    ANDLW	00001111B
    MOVWF	L_CONV_4F      
; 3 4 end    
    RETURN
;-------------------------------------
L_CONV_DEC:	    ;Convert 16 bit binary number into decimal 4-digit number
    ;now editing
    MOVF	L_CONV_FOUR_L,W
    ANDLW	00001111B
    MOVWF	L_CONV_1F
    MOVF	L_CONV_FOUR_L,W
    RRF		L_CONV_FOUR_L,F
    RRF		L_CONV_FOUR_L,F
    RRF		L_CONV_FOUR_L,F
    RRF		L_CONV_FOUR_L,F  
    MOVF	L_CONV_FOUR_L,W
    ANDLW	00001111B
    MOVWF	L_CONV_2F    
;first 1 2 next 3 4 
    MOVF	L_CONV_FOUR_H,W
    ANDLW	00001111B
    MOVWF	L_CONV_3F
    MOVF	L_CONV_FOUR_H,W
    RRF		L_CONV_FOUR_H,F
    RRF		L_CONV_FOUR_H,F
    RRF		L_CONV_FOUR_H,F
    RRF		L_CONV_FOUR_H,F  
    MOVF	L_CONV_FOUR_H,W
    ANDLW	00001111B
    MOVWF	L_CONV_4F      
; 3 4 end    
    RETURN
;-------------------------------------
RESET_READ_SW_SIG: 
    CLRF	PUSH_SW_READ
    CLRF	SW1_READ_FLG
    CLRF	SW2_READ_FLG
    CLRF	SW3_READ_FLG
    CLRF	SW4_READ_FLG    
    CLRF	READ_SW_EN  ;BIT X=SW X
    RETURN
READ_SW_SIG:
    MOVF	PORTB,W
    ;00 0-01 0-10 0-11 1-AND
    ANDLW	00001111B
    MOVWF	PUSH_SW_READ 
    ;If SW1 is pressed then write 1
    BTFSC	READ_SW_EN,1
    GOTO	$+7
    BTFSC	PUSH_SW_READ,0
    GOTO	$+5
    BTFSS	PORTB,0
    GOTO	$-1   
    MOVLW	1
    MOVWF	SW1_READ_FLG
    ;If SW2 is pressed then write 1
    BTFSC	READ_SW_EN,2
    GOTO	$+7    
    BTFSC	PUSH_SW_READ,1
    GOTO	$+5
    BTFSS	PORTB,1
    GOTO	$-1   
    MOVLW	1
    MOVWF	SW2_READ_FLG
    ;If SW3 is pressed then write 1 
    BTFSC	READ_SW_EN,3
    GOTO	$+7    
    BTFSC	PUSH_SW_READ,2
    GOTO	$+5
    BTFSS	PORTB,2
    GOTO	$-1    
    MOVLW	1
    MOVWF	SW3_READ_FLG  
    ;If SW4 is pressed then write 1  
    BTFSC	READ_SW_EN,4
    GOTO	$+7    
    BTFSC	PUSH_SW_READ,3
    GOTO	$+5
    BTFSS	PORTB,3
    GOTO	$-1    
    MOVLW	1
    MOVWF	SW4_READ_FLG    
    ;end
    RETURN
 ;-------------------------------------
RESET_TOUCH_SW_READ:
    CLRF	TOUCH_SW_FLG 
    CALL	BANKSET_1    
    CLRF	TRIS_BU
    CALL	BANKSET_0      
    CLRF	PORTB_BU
    RETURN
TOUCH_SW_READ:
    MOVF	PORTB,W
    MOVWF	PORTB_BU
    BSF	    	RB5    
    CALL	BANKSET_1
    MOVF	TRISB,W
    MOVWF	TRIS_BU
    BSF		TRISB5	;RESET VALUE
    CALL	BANKSET_0  
    BSF	    	RB5     
    BTFSC	RB5
    GOTO	$+5
    BTFSS	RB5
    GOTO	$-1  
    MOVLW	1
    MOVWF	TOUCH_SW_FLG      
    CALL	BANKSET_1
    MOVF	TRIS_BU,W
    MOVWF	TRISB
    CALL	BANKSET_0
    MOVF	PORTB_BU,W
    MOVWF	PORTB
    RETURN
 ;-------------------------------------      
DIGITAL_CLOCK0_PRE:
    CALL	BANKSET_1
    MOVLW	00001111B
    MOVWF	TRISB
    CALL	BANKSET_0
    
    CLRF	T2_ICNT_NUM_L
    CLRF	T2_ICNT_NUM_H    
    CLRF	ONESEC_FLG
    MOVLW	TMR2_INT_TMR_CL
    MOVWF	TMR2_CONST_L
    MOVLW	TMR2_INT_TMR_CH
    MOVWF	TMR2_CONST_H
    MOVLW	TMR2_INT_TMR_ADJ   
    MOVWF	TMR2_CONST_ADJ
    
    BCF		TMR2IF
    BCF		TMR1IF    
    CALL	BANKSET_1
    
    BSF		TMR2IE	    ;Timer2 interrupt enable ,PIE1
    BSF		PEIE	    ;PERIPHERAL INTERRUPT
    BSF		GIE	    ;GLOBAL INTERRUPT   
    CALL	BANKSET_0
    
    CLRF	SEGS_NUM_CONV_TMP
    CLRF	SEGS_OUT_DATA
    
    CLRF	MIN_ONE	
    CLRF	MIN_TEN		  
    MOVLW	1  
    MOVWF	HOUR_TEN	  
    MOVLW	2  
    MOVWF	HOUR_ONE	
    MOVLW	9
    MOVWF	MINONE_CONST	
    MOVLW	5
    MOVWF	MINTEN_CONST	
    MOVLW	9
    MOVWF	HOURONE_CONST	 
    MOVLW	2
    MOVWF	HOURTEN_CONST
    MOVLW	59
    MOVWF	SEC_CONST    
    CLRF	DC0_SEC_CNT   
    CLRF	D1D2_XOR_FLG
    
    CLRF	BITPLACE0	;DIVISION_2DIGIT
    CLRF	DIVISION_TMP0	;DIVISION_2DIGIT     
    CLRF	DIVISION_RESULT
    MOVLW	1
    MOVWF	BARL_LEV_NUM
    CALL	RESET_READ_SW_SIG
    CALL	RESET_CONV_30H_24H12H
    
DIGITAL_CLOCK0: 
    CALL	CONV_30H_24H12H

    MOVLW	00111000B		;111-Y7 DISPLAYOFF
    MOVWF	PORTA     
    MOVF	HOUR_TEN_DISP,W
 ;   MOVF	HOUR_TEN,W    
    MOVWF	SEGS_NUM_CONV_TMP
    CALL	SEGS_NUM_CONV 
    MOVF	SEGS_OUT_DATA,W
    MOVWF	PORTC
    MOVLW	00000000B		;000-Y0 
    MOVWF	PORTA      
    MOVLW	CHATTER_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1
     
 
    MOVLW	00111000B		;111-Y7 DISPLAYOFF
    MOVWF	PORTA    
    MOVF	HOUR_ONE_DISP,W
;    MOVF	HOUR_ONE,W    
    MOVWF	SEGS_NUM_CONV_TMP
    CALL	SEGS_NUM_CONV 
    BTFSS	DC0_SEC_CNT,0		;flag check
    GOTO	$+3    
    BSF	    	SEGS_OUT_DATA,7 
    GOTO	$+2    
    BCF	    	SEGS_OUT_DATA,7  
    MOVF	SEGS_OUT_DATA,W
    MOVWF	PORTC 
    MOVLW	00001000B		;100-Y1 
    MOVWF	PORTA    
    MOVLW	CHATTER_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1
 
    MOVLW	00111000B		;111-Y7 DISPLAYOFF
    MOVWF	PORTA      
    MOVLW	255
    MOVWF	PORTC
    BTFSS	SET_CLOCK_HOUR,SET_BIT_HOLD_AMPM
    GOTO	$+3
    BCF	    	RC1		;PM DICELED
    GOTO	$+2
    BCF	    	RC4		;AM DICELED    
    BTFSS	DC0_SEC_CNT,0		;SEC
    GOTO	$+3
    BCF	    	RC6		;DICELED    
    GOTO	$+2    
    BSF	    	RC6    
    MOVLW	00100000B		;100-Y4
    MOVWF	PORTA   
    MOVLW	10			;LIGHT ADJ
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1     
   
    MOVLW	00111000B		;111-Y7 DISPLAYOFF
    MOVWF	PORTA     
    MOVF	MIN_TEN,W
    MOVWF	SEGS_NUM_CONV_TMP
    CALL	SEGS_NUM_CONV   
    MOVF	SEGS_OUT_DATA,W
    MOVWF	PORTC 
    MOVLW	00010000B		;010-Y2
    MOVWF	PORTA    
    MOVLW	CHATTER_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1

    MOVLW	00111000B		;111-Y7 DISPLAYOFF
    MOVWF	PORTA     
    MOVF	MIN_ONE,W
    MOVWF	SEGS_NUM_CONV_TMP
    CALL	SEGS_NUM_CONV    
    MOVF	SEGS_OUT_DATA,W
    MOVWF	PORTC
    MOVLW	00011000B		;110-Y3
    MOVWF	PORTA       
    MOVLW	CHATTER_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1   
    
    MOVLW	00111000B		;111-Y7 DISPLAYOFF
    MOVWF	PORTA        
    INCF	DC0_SEC_CNT,F	;WHEN 60SEC
    DECFSZ	DC0_SEC_CNT,F	;    
    GOTO	$+3
    MOVLW	11111110B	;WRITE BARLED ONE    
    MOVWF	BARL_OUT_DATA
    MOVF	BARL_OUT_DATA,W
    MOVWF	PORTC

    
    MOVLW	00110000B		;011-Y6 BARLED
    MOVWF	PORTA     
    MOVLW	10			;LIGHT ADJ
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1   
    ;
    ;clock setting func
    MOVLW	255		;display off
    MOVWF	PORTC
    BSF		READ_SW_EN,4    
    BTFSC	RB3		;SW4 simultaneous press judgment
    GOTO	INCREMENT_CLOCK_START
    CALL	READ_SW_SIG
    BTFSC	SW3_READ_FLG,0
    GOTO	$+2
    GOTO	$+3			;next sw judgement
    CLRF	SW3_READ_FLG    
    GOTO	INCREMENT_HOUR		;add 1 hour
    BTFSC	SW2_READ_FLG,0
    GOTO	$+2
    GOTO	$+4			;next sw judgement
    CLRF	SW2_READ_FLG
    CLRF	DC0_SEC_CNT		;clr sec
    GOTO	INCREMENT_MINUTE	;add 1 min
    BTFSC	SW1_READ_FLG,0
    GOTO	$+2
    GOTO	INCREMENT_CLOCK_START	;next sw judgement
    CLRF	SW1_READ_FLG		;FLG CLEAR
    BTFSS	SET_CLOCK_HOUR,SET_BIT_30H
    GOTO	$+4 ;IF OTHER
    BCF		SET_CLOCK_HOUR,SET_BIT_30H;IF30H THEN24H   
    BSF		SET_CLOCK_HOUR,SET_BIT_24H 
    GOTO	DIGITAL_CLOCK0_JUMP1    
    BTFSS	SET_CLOCK_HOUR,SET_BIT_24H    
    GOTO	$+2 ;12H
    GOTO	$+4 ;24H
    BSF		SET_CLOCK_HOUR,SET_BIT_30H;IF12H THEN30H   
    BCF		SET_CLOCK_HOUR,SET_BIT_24H    
    GOTO	DIGITAL_CLOCK0_JUMP1
    BCF		SET_CLOCK_HOUR,SET_BIT_30H;IF24H THEN12H   
    BCF		SET_CLOCK_HOUR,SET_BIT_24H    
    GOTO	DIGITAL_CLOCK0_JUMP1  
INCREMENT_CLOCK_START:    
   ; 
    BTFSS	ONESEC_FLG,0		;flag check
    GOTO	DIGITAL_CLOCK0_JUMP1
    CLRF	ONESEC_FLG
    
    INCF	DC0_SEC_CNT,F
    
    MOVF	DC0_SEC_CNT,W    
    MOVWF	NUM_TO_DIVIDE
    MOVLW	8
    MOVWF	NUM_TOBE_DIVIDED   
    CALL	DIVISION_2DIGIT
    MOVF	DIVISION_RESULT,W
    MOVWF	BARL_LEV_NUM
    INCF	BARL_LEV_NUM,F
    CALL	BARLED_LEVEL_DISP    
    
    MOVF	DC0_SEC_CNT,W
    SUBWF	SEC_CONST,W    
    BTFSC	CARRY	;STATUS.C
    GOTO	DIGITAL_CLOCK0_JUMP1
    
;
    CLRF	DC0_SEC_CNT
INCREMENT_MINUTE:
    INCF	MIN_ONE,F    
    MOVF	MIN_ONE,W
    SUBWF	MINONE_CONST,W
    BTFSC	CARRY
    GOTO	DIGITAL_CLOCK0_JUMP1
    MOVLW	1
    ADDWF	MIN_TEN,F
    CLRF	MIN_ONE
    MOVF	MIN_TEN,W
    SUBWF	MINTEN_CONST,W
    BTFSC	CARRY
    GOTO	DIGITAL_CLOCK0_JUMP1
    CLRF	MIN_TEN    
INCREMENT_HOUR:    
    MOVLW	1
    ADDWF	HOUR_ONE,F
    MOVF	HOUR_ONE,W
    SUBWF	HOURONE_CONST,W
    BTFSC	CARRY
    GOTO	DIGITAL_CLOCK0_JUMP1    
    MOVLW	1
    ADDWF	HOUR_TEN,F
    CLRF	HOUR_ONE
    MOVF	HOUR_TEN,W
    SUBWF	HOURTEN_CONST,W 
    BTFSC	CARRY
    GOTO	DIGITAL_CLOCK0_JUMP1  
    CLRF	HOUR_TEN 
    MOVLW	6 
    MOVWF	HOUR_ONE    ;06AM
DIGITAL_CLOCK0_JUMP1:    
    GOTO	DIGITAL_CLOCK0
BIN_COUNT1_PRE: 
    ;BANK1 TRIS
    CALL	BANKSET_1    

    
    MOVLW	0Fh ;b'00001111'
    MOVWF	TRISB
    ;BANK0 PORT
    CALL	BANKSET_0    

    
    CLRF	PORTA    
    CLRF	BIN_PUSH_COUNT    
    CLRF	BIN_PUSH_COUNT_C    
    CLRF	PUSH_SW_READ 
    CLRF	L_CONV_FOUR_L
    CLRF	L_CONV_FOUR_H    
    CLRF	L_CONV_1F
    CLRF	L_CONV_2F
    CLRF	L_CONV_3F    
    CLRF	L_CONV_4F    
    CLRF	BIT_CNT_START_FLG

BIN_COUNT1:  ;
    CALL	READ_SW_SIG
    ;SW1
    INCF	SW1_READ_FLG,F 
    DECFSZ	SW1_READ_FLG,F 
    GOTO	$+2
    GOTO	$+5
    MOVLW	1
    ADDWF	BIN_PUSH_COUNT,F    
    BTFSC	CARRY
    INCF	BIN_PUSH_COUNT_C,F
    CLRF	SW1_READ_FLG
    ;SW2
    INCF	SW2_READ_FLG,F 
    DECFSZ	SW2_READ_FLG,F 
    GOTO	$+2
    GOTO	$+5
    MOVLW	1    
    SUBWF	BIN_PUSH_COUNT,F  
    BTFSS	STATUS,0
    DECF	BIN_PUSH_COUNT_C,F    
    CLRF	SW2_READ_FLG
    ;SW3
    INCF	SW3_READ_FLG,F 
    DECFSZ	SW3_READ_FLG,F 
    GOTO	$+2
    GOTO	$+3
    CLRF	BIN_PUSH_COUNT
    CLRF	BIN_PUSH_COUNT_C    
    CLRF	SW3_READ_FLG    
    ;SW4
    INCF	SW4_READ_FLG,F 
    DECFSZ	SW4_READ_FLG,F 
    GOTO	$+2			;SW4 pressed
    GOTO	$+8			;SW4 not pressed
    INCF	BIT_CNT_START_FLG,F 
    DECFSZ	BIT_CNT_START_FLG,F  
    GOTO	$+4			;n not equal 0 then clear the value
    MOVLW	BIN_CNT_MOV_SPD		;n equal 0 then input the value    
    MOVWF	BIT_CNT_START_FLG  
    GOTO	$+2
    CLRF	BIT_CNT_START_FLG  
    
    CLRF	SW4_READ_FLG     
;
    INCF	BIT_CNT_START_FLG,F	 
    DECFSZ	BIT_CNT_START_FLG,F  
    GOTO	$+2			;If N equal not 0
    GOTO	$+9			;If N equal 0 then skip   
    DECFSZ	BIT_CNT_START_FLG,F        
    GOTO	$+7			;If N not equal 1,0 
    MOVLW	BIN_CNT_MOV_SPD		;If N equal 1  
    MOVWF	BIT_CNT_START_FLG
    MOVLW	1 
    ADDWF	BIN_PUSH_COUNT,F  
    BTFSC	STATUS,0
    INCF	BIN_PUSH_COUNT_C,F     
    
    
    MOVF	BIN_PUSH_COUNT,W 
    MOVWF	L_CONV_FOUR_L
    
    MOVF	BIN_PUSH_COUNT_C,W 
    MOVWF	L_CONV_FOUR_H    
    
    CALL	L_CONV_HEX
 
    MOVLW	CHATTER_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1    
 
    MOVF	L_CONV_4F,W
    MOVWF	SEGS_NUM_CONV_TMP
    CALL	SEGS_NUM_CONV
    MOVLW	00000000B		;000-Y0 
    MOVWF	PORTA    
    MOVF	SEGS_OUT_DATA,W
    MOVWF	PORTC
    MOVLW	CHATTER_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1
        
    MOVF	L_CONV_3F,W
    MOVWF	SEGS_NUM_CONV_TMP
    CALL	SEGS_NUM_CONV   
    MOVLW	00001000B		;100-Y1 
    MOVWF	PORTA   
    MOVF	SEGS_OUT_DATA,W
    MOVWF	PORTC    
    MOVLW	CHATTER_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1
    
    MOVF	L_CONV_2F,W
    MOVWF	SEGS_NUM_CONV_TMP
    CALL	SEGS_NUM_CONV
    MOVLW	00010000B		;010-Y2
    MOVWF	PORTA    
    MOVF	SEGS_OUT_DATA,W
    MOVWF	PORTC 
    MOVLW	CHATTER_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1

    MOVF	L_CONV_1F,W
    MOVWF	SEGS_NUM_CONV_TMP
    CALL	SEGS_NUM_CONV   
    MOVLW	00011000B		;110-Y3
    MOVWF	PORTA    
    MOVF	SEGS_OUT_DATA,W
    MOVWF	PORTC
    MOVLW	CHATTER_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1
   
    MOVLW	00111000B		;111-Y7
    MOVWF	PORTA
    
    
    GOTO	BIN_COUNT1

    
    
LED_WAVE2_PRE: 
    NOP
LED_WAVE2:
    GOTO	LED_WAVE2
ELE_PIANO3_PRE: 
    NOP 
ELE_PIANO3:
    GOTO	ELE_PIANO3
TOUCH_SENSE4_PRE: 
    NOP
 
TOUCH_SENSE4:
    GOTO	TOUCH_SENSE4
SOUND_SW12_PRE:
    NOP
 
SOUND_SW12: 
    GOTO	SOUND_SW12
    
 ;-------------------------------------    
AD_CONV13_PRE:
    CLRF	PORTA   
    CALL	BANKSET_1
    MOVLW	0Fh ;b'00001111'
    MOVWF	TRISB
    CALL	BANKSET_0
;    BCF		ADCON0,CHS0    
;    BCF		ADCON0,CHS1     
;    BCF		ADCON0,CHS2     
;    BCF		ADCON0,CHS3     
    MOVLW	00000001B
    MOVWF	ADCON0
    
AD_CONV13:
    
    BSF		GO_DONE
    
    MOVLW	00111000B		;111-Y7 DISPLAYOFF
    MOVWF	PORTA   
    COMF	ADRESH,W		;INVERT
    MOVWF	PORTC   
    MOVLW	00110000B		;011-Y6 BARLED
    MOVWF	PORTA     
    MOVLW	210			;LIGHT ADJ
    ;ADD
    MOVLW	00111000B		;111-Y7 DISPLAYOFF
    MOVWF	PORTA    
    
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1       
    
    GOTO	AD_CONV13
 ;-------------------------------------    
 ;PREPARING
SERIAL_DATA_SEND:
    MOVLW	00111000B		;111-Y7 DISPLAYOFF
    MOVWF	PORTA   
    CALL	BANKSET_1 
    MOVLW	32
    MOVWF	SPBRG
    CALL	BANKSET_3    
    BCF		BRG16
    CALL	BANKSET_1    
    BCF		SYNC
    BCF		BRGH
    BSF		TXEN    
    CALL	BANKSET_0    
    
    BSF		SPEN

  

    CALL	BANKSET_1     
    BTFSS	TRMT   ;CHECK EMPTY
    GOTO	SERIAL_DATA_SEND_ENDING 
    CALL	BANKSET_0    
    
    CALL	TX_CHAR_CRLF    

    
    MOVLW	'P'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT   
    MOVLW	'R'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT       
    MOVLW	'O'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT   
    MOVLW	'G'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT       
    MOVLW	32		;SPACE KEY
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT    
    MOVLW	'V'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT   
    MOVLW	'.'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT    
    MOVLW	'1'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT       
    MOVLW	'0'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT 
    
    CALL	TX_CHAR_CRLF
    CALL	TX_CHAR_SW
    MOVLW	'1'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT 
    MOVLW	':'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT 
    CLRW
    MOVLW	'X'
    BTFSC	RB0
    MOVLW	'_'   
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT  
    CALL	TX_CHAR_CRLF        

    CALL	TX_CHAR_SW
    MOVLW	'2'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT 
    MOVLW	':'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT 
    CLRW
    MOVLW	'X'
    BTFSC	RB1
    MOVLW	'_'   
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT  
    CALL	TX_CHAR_CRLF
    
    CALL	TX_CHAR_SW
    MOVLW	'3'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT 
    MOVLW	':'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT 
    CLRW
    MOVLW	'X'
    BTFSC	RB2
    MOVLW	'_'   
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT  
    CALL	TX_CHAR_CRLF
    
    CALL	TX_CHAR_SW
    MOVLW	'4'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT 
    MOVLW	':'
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT 
    CLRW
    MOVLW	'X'
    BTFSC	RB3
    MOVLW	'_'   
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT  
    CALL	TX_CHAR_CRLF    
    
    CALL	TX_CHAR_CRLF    
    
SERIAL_DATA_SEND_ENDING:    
    CALL	BANKSET_0    ;BANK1??BANK0???
    
    
    CALL	BANKSET_1  
    
    BCF		TXEN    
    CALL	BANKSET_0
    
    BCF		SPEN  
   
    RETURN
TRMT_EMPTY_WAIT:    
    CALL	BANKSET_1     
    BTFSS	TRMT   ;NOW SENDING    
    GOTO	$-1    
    CALL	BANKSET_0    
    RETURN
TX_CHAR_CRLF:			;?????
    MOVLW	13		;CR KEY
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT    
    MOVLW	10		;LF KEY
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT 
    RETURN
TX_CHAR_SW:
    MOVLW	'S'		;S
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT    
    MOVLW	'W'		;W
    MOVWF	TXREG
    CALL	TRMT_EMPTY_WAIT 
    RETURN    
    
SERIAL_DATA_RECEIVE:
    CALL	BANKSET_1
    BSF		RC7		;IOsetting    
    CALL	BANKSET_0    
    
    MOVLW	00111000B		;111-Y7 DISPLAYOFF
    MOVWF	PORTA   
    CALL	BANKSET_1 
    MOVLW	32
    MOVWF	SPBRG
    CALL	BANKSET_3    
    BCF		BRG16
    CALL	BANKSET_1    
    BCF		SYNC
    BCF		BRGH
    BSF		TXEN    
    CALL	BANKSET_0     
    
    BSF		SPEN
    BSF		CREN    

    ;
    BTFSS	RCIF	    ;1??????
    GOTO	$-1
    MOVF	RCREG,W		    ;??????W?????
    MOVWF	TXREG		    
    CALL	TRMT_EMPTY_WAIT    
    
    CALL	BANKSET_1  
    
    BCF		TXEN 

    CALL	BANKSET_0
    BCF		CREN    
    BCF		SPEN 
    
    CALL	BANKSET_1
    BCF		RC7		;IOsetting    
    CALL	BANKSET_0   
 
    RETURN    
    
 ;-------------------------------------     
RC_SERVO14_PRE:
    NOP
    
RC_SERVO14:
    GOTO	RC_SERVO14
TEST_FUNC15_PRE: 
    NOP
    
TEST_FUNC15:   
    CALL	SERIAL_DATA_SEND
    CALL	SERIAL_DATA_RECEIVE
;    GOTO	START
    GOTO	TEST_FUNC15   

PG_SEL_PRE:    
    CALL	RESET_READ_SW_SIG    
    CLRF	SW4_READ_FLG	    ;malfunction prevention
PG_SEL: ;program select
;editing 
    CALL	READ_SW_SIG
    ;SW1
    INCF	SW1_READ_FLG,F 
    DECFSZ	SW1_READ_FLG,F 
    GOTO	$+2
    GOTO	$+2
    INCF	BIN_PUSH_COUNT,F  
    BTFSC	BIN_PUSH_COUNT,4    ;If over range then count clear   
    CLRF	BIN_PUSH_COUNT 
    CLRF	SW1_READ_FLG
    ;SW2
    INCF	SW2_READ_FLG,F 
    DECFSZ	SW2_READ_FLG,F 
    GOTO	$+2		    ;If N= except 0
    GOTO	$+8		    ;If N=0
    INCF	BIN_PUSH_COUNT,F    ;If n=0 then
    DECFSZ	BIN_PUSH_COUNT,F    ;skip next line
    GOTO	$+3		    ;If N= except 0
    MOVLW	00010000B	    ;If N=0 ,0x0FwithDECF    
    MOVWF	BIN_PUSH_COUNT
    DECF	BIN_PUSH_COUNT,F    
    CLRF	SW2_READ_FLG
    ;SW3
    INCF	SW3_READ_FLG,F 
    DECFSZ	SW3_READ_FLG,F 
    GOTO	$+2
    GOTO	$+2
    CLRF	BIN_PUSH_COUNT
    CLRF	SW3_READ_FLG    
;  
    MOVF	BIN_PUSH_COUNT,W 
    MOVWF	L_CONV_FOUR_L
    CALL	L_CONV_HEX
 
    MOVLW	CHATTER_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1    
    
    MOVLW	00000000B		;000-Y0 
    MOVWF	PORTA    
    MOVLW	SEGS5			;Display S
    MOVWF	PORTC
    MOVLW	CHATTER_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1
    
    MOVLW	00001000B		;100-Y1 
    MOVWF	PORTA   
    MOVLW	SEGSE			;Display E
    MOVWF	PORTC    
    MOVLW	CHATTER_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1
    
    MOVLW	00010000B		;010-Y2
    MOVWF	PORTA    
    MOVLW	SEGSL			;Display L
    MOVWF	PORTC 
    MOVLW	CHATTER_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1    
    MOVF	L_CONV_1F,W
    MOVWF	SEGS_NUM_CONV_TMP
    CALL	SEGS_NUM_CONV   
    MOVLW	00011000B		;110-Y3
    MOVWF	PORTA    
    MOVF	SEGS_OUT_DATA,W		;Program select number
    MOVWF	PORTC
    MOVLW	CHATTER_TIME_CNT1
    MOVWF	DELAY_TIME_NUM1    
    CALL	DELAY_LOOP_SET1
   
    MOVLW	00111000B		;111-Y7
    MOVWF	PORTA    
    
    ;SW4
    INCF	SW4_READ_FLG,F 
    DECFSZ	SW4_READ_FLG,F 
    GOTO	$+2
    GOTO	PG_SEL    
    CLRF	SW4_READ_FLG 
    
    MOVF	BIN_PUSH_COUNT,W
    MOVWF	PROG_MODE_NUM    
    MOVF	BIN_PUSH_COUNT,W
    MOVWF	PROG_MODE_NUM_TMP
    
    INCF	BIN_PUSH_COUNT,F	;n=n+1
    DECFSZ	BIN_PUSH_COUNT,F	;if n-1=0
    GOTO	$+2
    GOTO	DIGITAL_CLOCK0_PRE	;PROGRAM0
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	BIN_COUNT1_PRE		;PROGRAM1
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	LED_WAVE2_PRE		;PROGRAM2
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	ELE_PIANO3_PRE		;PROGRAM3
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	TOUCH_SENSE4_PRE	;PROGRAM4
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	$		;PROGRAM5
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	$   		;PROGRAM6
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	$    		;PROGRAM7
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	$    		;PROGRAM8
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	$    		;PROGRAM9
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	$    		;PROGRAM10
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	$    		;PROGRAM11
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	SOUND_SW12_PRE 		;PROGRAM12    
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	AD_CONV13_PRE  		;PROGRAM13    
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	RC_SERVO14_PRE 		;PROGRAM14
    DECFSZ	BIN_PUSH_COUNT,F	;
    GOTO	$+2
    GOTO	TEST_FUNC15_PRE 	;PROGRAM15_experimental func EUSART connection
    GOTO	DIGITAL_CLOCK0_PRE	;IF OUT OF RANGE THEN PROGRAM0    
    GOTO	PG_SEL 

INT_SUB:	    ;test editing
    MOVWF	WREG_BU			;backup W_reg
    SWAPF	STATUS,W		;STATUS
    MOVWF	STATUS_BU		;backup STATUS_reg
    SWAPF	WREG_BU,W		;W_reg
    MOVWF	WREG_BU			;save
    CALL	BANKSET_0		;BANK0 setting
    ;BCF		GIE  
;insert interrupt here   
    BTFSS	TMR1IF	    ;check TIMER1 flag
    GOTO	$+1		    ;no need to check now
    MOVF	TMR1H_HOLD,W
    MOVWF	TMR1H
    MOVF	TMR1L_HOLD,W
    MOVWF	TMR1L
    BTFSS	TMR2IF	    ;check TIMER2 flag
    GOTO	TMR2_END	    ;
    DECFSZ	TMR2_CONST_ADJ,W 
    GOTO	$+4
    MOVLW	11111111B
    MOVWF	TMR2_CONST_ADJ   
    GOTO	TMR2_END    
    DECFSZ	TMR2_CONST_H,F 
    GOTO	TMR2_END	    ;
    DECFSZ	TMR2_CONST_L,F
    GOTO	$+2  
    GOTO	$+4
    MOVLW	TMR2_INT_TMR_CH
    MOVWF	TMR2_CONST_H    
    GOTO	TMR2_END
    MOVLW	TMR2_INT_TMR_CL
    MOVWF	TMR2_CONST_L
    MOVLW	TMR2_INT_TMR_CH
    MOVWF	TMR2_CONST_H
    MOVLW	TMR2_INT_TMR_ADJ   
    MOVWF	TMR2_CONST_ADJ
    MOVLW	1
    MOVWF	ONESEC_FLG 
TMR2_END:    
    BCF		TMR1IF    
    BCF		TMR2IF    
    SWAPF	STATUS_BU,W
    MOVWF	STATUS
    ;SWAPF	WREG_BU,F      
    SWAPF	WREG_BU,W  
    RETFIE				;return from interrupt
 ;-------------------------------------
RESET_CONV_30H_24H12H:
    BSF		SET_CLOCK_HOUR,SET_BIT_30H
    BCF		SET_CLOCK_HOUR,SET_BIT_24H
    BCF		SET_CLOCK_HOUR,SET_BIT_HOLD_AMPM
    RETURN
CONV_30H_24H12H:
    ;GOTO	AMPM_CHECK_END
    ;PREPARE
    MOVLW	2	    ;24PM
    SUBWF	HOUR_TEN,W  
    BTFSS	STATUS,0  
    GOTO	$+2	    ;0-19
    GOTO	$+6	    ;20-29
    MOVLW	1	    ;12PM
    SUBWF	HOUR_TEN,W  
    BTFSS	STATUS,0
    GOTO	LABELSET_BIT_AM	    ;0-9    =AM
    GOTO	$+6		    ;10-19  
    MOVLW	4	    ;24PM    
    SUBWF	HOUR_ONE,W 
    BTFSS	STATUS,0    
    GOTO	LABELSET_BIT_PM	    ;20-23  =PM
    GOTO	LABELSET_BIT_AM	    ;24-29  =AM     
    MOVLW	2	    ;12PM    
    SUBWF	HOUR_ONE,W  
    BTFSS	STATUS,0 
    GOTO	LABELSET_BIT_AM	    ;10-11  =AM
    GOTO	LABELSET_BIT_PM	    ;12-19  =PM
LABELSET_BIT_AM:    
    BCF		SET_CLOCK_HOUR,SET_BIT_HOLD_AMPM;SETAM   
    GOTO	AMPM_CHECK_END  
LABELSET_BIT_PM:    
    BSF		SET_CLOCK_HOUR,SET_BIT_HOLD_AMPM;SETPM       
    GOTO	AMPM_CHECK_END    
AMPM_CHECK_END:
    MOVF	HOUR_TEN,W     
    MOVWF	HOUR_TEN_DISP    
    MOVF	HOUR_ONE,W     
    MOVWF	HOUR_ONE_DISP    
    BTFSS	SET_CLOCK_HOUR,SET_BIT_30H
    GOTO	$+2
    RETURN
    MOVLW	4	    ;14-19,24-29   
    SUBWF	HOUR_ONE,W  
    BTFSS	STATUS,0    ;BIGW   BIGF OR W=F    
    GOTO	CONV_7TO23_START
    MOVLW	2	    ;24-29   
    SUBWF	HOUR_TEN,W  
    BTFSS	STATUS,0    ;BIGW   BIGF OR W=F    
    GOTO	CONV_7TO23_START    
    MOVLW	2	    ;24-29   
    SUBWF	HOUR_TEN,W
    MOVWF	HOUR_TEN_DISP
    MOVLW	4	    ;24-29   
    SUBWF	HOUR_ONE,W    
    MOVWF	HOUR_ONE_DISP
    RETURN    
CONV_7TO23_START:   
    BTFSC	SET_CLOCK_HOUR,SET_BIT_24H    
    RETURN		;24H    
    MOVLW	1	    ;10-23   
    SUBWF	HOUR_TEN,W  
    BTFSS	STATUS,0    ;BIGW   BIGF OR W=F    
    RETURN
    MOVLW	2	    ;12-19  
    SUBWF	HOUR_ONE,W  
    BTFSS	STATUS,0    ;BIGW   BIGF OR W=F 
    GOTO	$+2	    ;10-12,20-23    
    GOTO	$+6 
    MOVLW	2	    ;20-23   
    SUBWF	HOUR_TEN,W  
    BTFSS	STATUS,0    ;BIGW   BIGF OR W=F    
    RETURN	;10-12
    GOTO	$+8    
    MOVLW	1	    ;12-23     
    SUBWF	HOUR_TEN,W
    MOVWF	HOUR_TEN_DISP
    MOVLW	2	    ;12-23   
    SUBWF	HOUR_ONE,W    
    MOVWF	HOUR_ONE_DISP
    RETURN
    MOVLW	2	    ;12-23     
    SUBWF	HOUR_TEN,W
    MOVWF	HOUR_TEN_DISP
    MOVLW	2	    ;22-23   
    SUBWF	HOUR_ONE,W  
    BTFSC	STATUS,0    ;   BIGF OR W=F    BIGW
    INCF	HOUR_TEN_DISP,F
    MOVLW	8	    ;12-23   
    ADDWF	HOUR_ONE,W    
    MOVWF	HOUR_ONE_DISP    
    RETURN    
;-------------------------------------     
DIVISION_2DIGIT: 
    ;NUM_TO_DIVIDE
    INCF	NUM_TOBE_DIVIDED,F
    DECFSZ	NUM_TOBE_DIVIDED,F
    GOTO	$+2
    GOTO	$	;DIVIDE ERROR
    MOVF	NUM_TOBE_DIVIDED,W
    MOVWF	BITPLACE0
    ;
    CALL	CONV_BITPLACE_2DIGIT
    MOVF	NUM_TO_DIVIDE,W
    MOVWF	DIVISION_TMP0    
    INCF	BITPLACE0,F
    DECFSZ	BITPLACE0,F	;N=0-UNFOUND
    GOTO	$+3
    CLRF	DIVISION_TMP0    
    GOTO	DIVISION_2DIGIT_ADD 
;    BCF		STATUS,C
;    RRF		DIVISION_TMP0
    DECFSZ	BITPLACE0,F	;N=1-1
    GOTO	$+2
    GOTO	DIVISION_2DIGIT_ADD 
    BCF		STATUS,0
    RRF		DIVISION_TMP0,F
    DECFSZ	BITPLACE0,F	;N=2-2
    GOTO	$+2
    GOTO	DIVISION_2DIGIT_ADD 
    BCF		STATUS,0
    RRF		DIVISION_TMP0,F
    DECFSZ	BITPLACE0,F	;N=3-4
    GOTO	$+2
    GOTO	DIVISION_2DIGIT_ADD 
    BCF		STATUS,0
    RRF		DIVISION_TMP0,F
    DECFSZ	BITPLACE0,F	;N=4-8
    GOTO	$+2
    GOTO	DIVISION_2DIGIT_ADD 
    BCF		STATUS,0
    RRF		DIVISION_TMP0,F    
    DECFSZ	BITPLACE0,F	;N=5-16
    GOTO	$+2
    GOTO	DIVISION_2DIGIT_ADD 
    BCF		STATUS,0
    RRF		DIVISION_TMP0,F 
    DECFSZ	BITPLACE0,F	;N=6-32
    GOTO	$+2
    GOTO	DIVISION_2DIGIT_ADD 
    BCF		STATUS,0
    RRF		DIVISION_TMP0,F
    DECFSZ	BITPLACE0,F	;N=7-64
    GOTO	$+2
    GOTO	DIVISION_2DIGIT_ADD 
    BCF		STATUS,0
    RRF		DIVISION_TMP0,F    
    DECFSZ	BITPLACE0,F	;N=8-128
    GOTO	$+2
    GOTO	DIVISION_2DIGIT_ADD 
    BCF		STATUS,0
    RRF		DIVISION_TMP0,F       
DIVISION_2DIGIT_ADD:
    MOVF	DIVISION_TMP0,W  
    MOVWF	DIVISION_RESULT
    RETURN
;------------------------------------- 
CONV_BITPLACE_2DIGIT:	    ;CONV_BITPLACE_TO_2DIGIT 
    ;CANT INPUT EXCEPT 1 2 4 8 16 32 64 128   
    BTFSS	BITPLACE0,7
    GOTO	$+4
    MOVLW	8
    MOVWF	BITPLACE0
    RETURN
    BTFSS	BITPLACE0,6
    GOTO	$+4
    MOVLW	7
    MOVWF	BITPLACE0
    RETURN    
    BTFSS	BITPLACE0,5
    GOTO	$+4
    MOVLW	6
    MOVWF	BITPLACE0
    RETURN
    BTFSS	BITPLACE0,4
    GOTO	$+4
    MOVLW	5
    MOVWF	BITPLACE0
    RETURN     
    BTFSS	BITPLACE0,3
    GOTO	$+4
    MOVLW	4
    MOVWF	BITPLACE0
    RETURN
    BTFSS	BITPLACE0,2
    GOTO	$+4
    MOVLW	3
    MOVWF	BITPLACE0
    RETURN    
    BTFSS	BITPLACE0,1
    GOTO	$+4
    MOVLW	2
    MOVWF	BITPLACE0
    RETURN
    BTFSS	BITPLACE0,0
    GOTO	$+4
    MOVLW	1
    MOVWF	BITPLACE0
    RETURN
    MOVLW	0	    ;IF UNFOUND
    MOVWF	BITPLACE0    
    RETURN
BANKSET_0:
    BCF		RP1	;setting BANK0
    BCF		RP0	;BANK0     
    RETURN
BANKSET_1:
    BCF		RP1	;setting BANK1
    BSF		RP0	;BANK1  
    RETURN
BANKSET_2:
    BSF		RP1	;setting BANK2
    BCF		RP0	;BANK2
    RETURN
BANKSET_3:
    BSF		RP1	;setting BANK3
    BSF		RP0	;BANK3
    RETURN
;-------------------------------------    
DELAY_LOOP_SET1:	;delay_loop1
    MOVF	DELAY_TIME_NUM1,W
    MOVWF	DELAY_TIME1       
DELAY_LOOP_TIME1:    
    DECFSZ	DELAY_TIME1,F
    GOTO	DELAY_LOOP_TIME1
    RETURN
DELAY_LOOP_SET2:    ;delay_loop2
    MOVF	DELAY_TIME_NUM2,W
    MOVWF	DELAY_TIME2     
DELAY_LOOP_TIME2:
    CALL	DELAY_LOOP_SET1
    DECFSZ	DELAY_TIME2,F
    GOTO	DELAY_LOOP_TIME2 
    RETURN
DELAY_LOOP_SET3: ;delay_loop3   
    MOVF	DELAY_TIME_NUM3,W
    MOVWF	DELAY_TIME3     
DELAY_LOOP_TIME3:
    CALL	DELAY_LOOP_SET2
    DECFSZ	DELAY_TIME3,F
    GOTO	DELAY_LOOP_TIME3 
    RETURN    
;    GOTO	START
    GOTO $                          ; loop forever
    END resetVec


